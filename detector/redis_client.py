import redis
from redis.sentinel import Sentinel

import logging
import os

# Logging configuration
FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=FORMAT)


class RedisClient(object):
    def __init__(self, host='localhost', port=6379, db=0):
        self._host = host
        self._port = port
        self._db = db
        self._conn = None
        self._sentinel = None
        self._master = None
        self._slave = None
        self._sentinel_master_name = os.environ['SENTINEL_MASTER_NAME']
        self._sentinel_prefix = os.environ['SENTINEL_PREFIX']
        self._sentinel_port = os.environ['SENTINEL_PORT']

    def _create_connection(self):
        if self._conn is None:
            try:
                self._conn = redis.Redis(host=self._host, port=self._port, db=self._db)
            except redis.RedisError as e_err:
                logging.error(e_err)

    def get_connection(self):
        if self._conn is None:
            self._create_connection()

        return self._conn

    def _get_sentinel(self):
        if self._sentinel is None:
            sentinel_nodes = []
            for i in range(1, 4):
                sentinel_nodes.append((self._sentinel_prefix + "_" + str(i), self._sentinel_port))

            self._sentinel = Sentinel(sentinels=sentinel_nodes, socket_timeout=0.1)

        return self._sentinel

    def get_master(self):
        if self._sentinel is None:
            self._sentinel = self._get_sentinel()

        if self._sentinel is not None and self._master is None:
            self._master = self._sentinel.master_for(self._sentinel_master_name, socket_timeout=0.1)

        return self._master

    def get_slave(self):
        if self._sentinel is None:
            self._sentinel = self._get_sentinel()

        if self._sentinel is not None and self._slave is None:
            self._slave = self._sentinel.slave_for(self._sentinel_master_name, socket_timeout=0.1)

        return self._slave
