from redis.sentinel import *

import logging
import os

# Logging configuration
FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=FORMAT)


class RedisClient(object):
    def __init__(self, host='localhost', port=6379, db=0):
        self._host = host
        self._port = port
        self._db = db
        self._conn = None
        self._sentinel = None
        self._master = None
        self._slave = None
        self._sentinel_master_name = os.environ['SENTINEL_MASTER_NAME']
        self._sentinel_prefix = os.environ['SENTINEL_PREFIX']
        self._sentinel_port = os.environ['SENTINEL_PORT']

    def _get_sentinel(self):
        try:
            if self._sentinel is None:
                sentinel_nodes = []
                for i in range(1, 4):
                    sentinel_nodes.append((self._sentinel_prefix + "_" + str(i), self._sentinel_port))

                self._sentinel = Sentinel(sentinels=sentinel_nodes, socket_timeout=0.1)
        except (ConnectionError, TimeoutError) as err:
            logging.error("Error in getting redis sentinel cluster client: %s ...", err)

        return self._sentinel

    def _get_master(self):
        if self._sentinel is None:
            self._sentinel = self._get_sentinel()

        try:
            if self._sentinel is not None and self._master is None:
                self._master = self._sentinel.master_for(self._sentinel_master_name, socket_timeout=0.1)
        except (ConnectionError, MasterNotFoundError) as err:
            logging.error("Error in getting redis client instance for master %s: %s ...",
                          self._sentinel_master_name, err)

    def _get_slave(self):
        if self._sentinel is None:
            self._sentinel = self._get_sentinel()

        try:
            if self._sentinel is not None and self._slave is None:
                self._slave = self._sentinel.slave_for(self._sentinel_master_name, socket_timeout=0.1)
        except (ConnectionError, SlaveNotFoundError) as err:
            logging.error("Error in getting redis client instance for slave of master %s : %s ...",
                          self._sentinel_master_name, err)

    def get(self, key):
        self._get_slave()

        get_status = "ERROR"
        if self._slave is not None:
            try:
                get_status = self._slave.get(key)
            except Exception as err:
                logging.error("Error fetching value from redis: %s ...", err)
        else:
            logging.error("No active connection to talk with backend ...")

        return get_status

    def set(self, key, value):
        self._get_master()

        set_status = "ERROR"
        if self._master is not None:
            try:
                set_status = self._master.set(key, value)
            except Exception as err:
                logging.error("Error updating value into redis: %s ...", err)
        else:
            logging.error("No active connection to talk with backend ...")

        return set_status
