from flask_testing import TestCase
import unittest
from detector import app
import detector
from unittest.mock import patch
import os


class DetectorAPITest(TestCase):
    def create_app(self):
        app.config['TESTING'] = True
        return app

    def test_url_info_404(self):
        response = self.client.get('/urlinfo/2/demo.com')
        self.assert404(response)
        self.assertEqual(response.json['status'], "api version not implemented")

    @patch('detector.get_url_info_v1')
    def test_url_info_200(self, get_url_info_v1_func):
        status = {
            'host': 'demo.com',
            'path': 'demo.com',
            'status': 'whitelisted'
        }

        get_url_info_v1_func.return_value = status

        response = self.client.get('/urlinfo/1/demo.com')
        self.assert200(response)
        self.assertEqual(response.json, status)

    @patch('detector.get_url_info_v1')
    def test_url_info_500(self, get_url_info_v1_func):
        status = {
            'host': '',
            'path': '',
            'status': 'backend Not available'
        }

        get_url_info_v1_func.return_value = None

        response = self.client.get('/urlinfo/1/demo.com')
        self.assert500(response)
        self.assertEqual(response.json, status)

    def test_update_url_store_404(self):
        response = self.client.get('/urlinfo/update/2/demo.com')
        self.assert404(response)
        self.assertEqual(response.json['status'], "api version not implemented")

    @patch('detector.update_url_store_v1')
    def test_update_url_store_201(self, update_url_store_v1_func):
        response_msg = {
            'status': 'Successfully updated',
        }

        update_url_store_v1_func.return_value = True

        response = self.client.get('/urlinfo/update/1/demo.com')
        self.assertEqual(response.json, response_msg)

    @patch('detector.update_url_store_v1')
    def test_update_url_store_500(self, update_url_store_v1_func):
        response_msg = {
            'status': 'Backend Not available',
        }

        update_url_store_v1_func.return_value = False

        response = self.client.get('/urlinfo/update/1/demo.com')
        self.assertEqual(response.json, response_msg)


class DetectorAPISupportTest(unittest.TestCase):
    def setUp(self):
        os.environ['SENTINEL_MASTER_NAME'] = 'master'
        os.environ['SENTINEL_PREFIX'] = 'sentinel'
        os.environ['SENTINEL_PORT'] = '11111'

    @patch('redis_client.RedisClient.get')
    def test_get_url_info_v1_None(self, get_func):
        get_func.return_value = "ERROR"

        status = detector.get_url_info_v1(host='', path='', query_string='')
        self.assertIsNone(status)

    @patch('redis_client.RedisClient.get')
    def test_get_url_info_v1_whitelist(self, get_func):
        url_info = {
            'host': 'demo.whitelist.com',
            'path': '',
            'status': 'whitelisted'
        }

        get_func.return_value = None

        url_info_response = detector.get_url_info_v1(host='demo.whitelist.com', path='', query_string='')
        self.assertEqual(url_info_response, url_info)

    @patch('redis_client.RedisClient.get')
    def test_get_url_info_v1_whitelist_cached(self, get_func):
        get_func.return_value = None

        detector.get_url_info_v1(host='demo.whitelist.com', path='', query_string='')

        assert not get_func.called

    @patch('redis_client.RedisClient.get')
    def test_get_url_info_v1_blacklist(self, get_func):
        url_stat = {
            'host': 'demo.blacklist.com',
            'path': '',
        }

        expected_url_stat = {
            'host': 'demo.blacklist.com',
            'path': '',
            'status': 'blacklisted',
            'stored_info': str(url_stat)
        }

        get_func.return_value = str(url_stat).encode()

        url_info_response = detector.get_url_info_v1(host='demo.blacklist.com', path='', query_string='')

        self.assertEqual(url_info_response, expected_url_stat)

    @patch('redis_client.RedisClient.get')
    def test_get_url_info_v1_blacklist_cached(self, get_func):
        url_stat = {
            'path': 'demo.blacklist.com',
        }

        get_func.return_value = url_stat

        detector.get_url_info_v1(host='demo.blacklist.com', path='', query_string='')

        assert not get_func.called

    @patch('redis_client.RedisClient.set')
    def test_update_url_store_v1_true(self, set_func):
        set_func.return_value = True

        update_response = detector.update_url_store_v1(host='demo.blacklist.com', path='', query_string='')
        self.assertTrue(update_response)

    @patch('redis_client.RedisClient.set')
    def test_update_url_store_v1_false(self, set_func):
        set_func.return_value = False

        update_response = detector.update_url_store_v1(host='demo.whitelist.com', path='', query_string='')
        self.assertFalse(update_response)


class DetectorRedisTest(unittest.TestCase):
    def setUp(self):
        os.environ['SENTINEL_MASTER_NAME'] = 'master'
        os.environ['SENTINEL_PREFIX'] = 'sentinel'
        os.environ['SENTINEL_PORT'] = '11111'


if __name__ == '__main__':
    unittest.main()
