from flask import Flask, jsonify, request
from flask_caching import Cache
from redis_client import RedisClient
import logging

# Logging configuration
FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=FORMAT)

app = Flask(__name__)
cache = Cache(app, config={'CACHE_TYPE': 'simple', 'CACHE_THRESHOLD': 1000})


@app.route('/urlinfo/<version>/', defaults={'path_info': ''})
@app.route('/urlinfo/<version>/<path:path_info>', methods=['GET'])
def url_info(version, path_info):
    target_host = path_info.split('/')[0]

    if version == "1":
        _response = get_url_info_v1(target_host, path_info, request.query_string)

        if _response is not None:
            return jsonify(_response), 200
        else:
            return "Backend Not available", 500
    else:
        logging.error("Version %s not available right now.")
        return "Not Found", 404


@app.route('/urlinfo/update/<version>/', defaults={'path_info': ''})
@app.route('/urlinfo/update/<version>/<path:path_info>', methods=['GET'])
def update_url_store(version, path_info):
    target_host = path_info.split('/')[0]

    if version == "1":
        _response = update_url_info_v1(target_host, path_info, request.query_string)

        if _response:
            return "Successfully updated", 201
        else:
            return "Backend Not available", 500
    else:
        logging.error("Version %s not available right now.")
        return "Not Found", 404


@cache.memoize(timeout=60)
def get_url_info_v1(host, path, query_string):
    """
    Get the url info from the Redis backend, if it is malware or not
    :param host: suspected url host
    :param path: path with suspected url
    :param query_string: Queury string related to suspected url
    :return: Dict of suspected url with check if it is malware or not
    """
    status = {
        'host': host,
        'path': path,
        'status': 'whitelisted'
    }

    if len(str(query_string)) != 0:
        status['query'] = query_string.decode("utf-8")

    r_client = RedisClient()
    r_conn = r_client.get_slave()

    if r_conn is None:
        logging.error("No active connection to talk with backend ...")
        return None

    malware_content = r_conn.get(host)
    if malware_content is not None and len(malware_content) != 0:
        status['status'] = 'blacklisted'

    return status


def update_url_info_v1(host, path, query_string):
    """
    Update the Redis backend with incoming malware url
    :param host: malware url host
    :param path: path with maleware url
    :param query_string: Queury string related to malware url
    :return: True if successfully updated else False
    """
    url_stat = {
        'path': path,
    }

    if len(str(query_string)) != 0:
        url_stat['query'] = query_string.decode("utf-8")

    r_client = RedisClient()
    r_conn = r_client.get_master()

    if r_conn is None:
        logging.error("No active connection to talk with backend ...")
        return None

    update_done = r_conn.set(host, url_stat)
    logging.info("Malware URL database has been updated with %s : %s", host, update_done)

    return update_done


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8008, threaded=True, debug=True)
